name: Release
on:
  push:
    tags:
      - "*"
  pull_request: # debug
permissions:
  contents: write
jobs:
  release-binary:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64
    runs-on: ${{ (matrix.os == 'windows-latest' && 'ubuntu-latest') || matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # --------- setup cross compilers ---------
      - name: Install cross-compiler for linux/arm64
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install gcc-aarch64-linux-gnu
      - name: Install cross-compiler for windows
        if: matrix.os == 'windows-latest'
        run: sudo apt-get install gcc-mingw-w64-x86-64
      # --------- setup rust ---------
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Add macOS Rust target
        if: matrix.os == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
      - name: Add Windows Rust target
        if: matrix.os == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-gnu
      - name: Setup cross toolchain
        run: cargo install cross
      # --------- setup go ---------
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      # --------- goreleaser ---------
      - name: Set config file
        id: config
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            OS_NAME="linux"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            OS_NAME="darwin"
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            OS_NAME="windows"
          fi
          echo "config_file=.goreleaser-${OS_NAME}-${{ matrix.arch }}.yaml" >> $GITHUB_OUTPUT
      - name: Release
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          # args: release --clean --config ${{ steps.config.outputs.config_file }}
          args: build --skip validate --clean --config ${{ steps.config.outputs.config_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
